package Staff;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;


public class staffBook extends javax.swing.JInternalFrame {

    
    public staffBook() {
        initComponents();
        Connect();
        showTable();
        background();
        autoBookID();
        txtBookID.setEditable(false);
    }
    
    Connection con; 
    PreparedStatement pst;
    ResultSet rs; 
    
    public final void Connect() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/libraryManagementSystem", "root", "");
            System.out.println("Database connection successful.");
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(staffBook.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error connecting to database: " + ex.getMessage());
        }
    }
    
    
    public final void showTable() {
    try {
        String query = "SELECT * FROM Books";
        pst = con.prepareStatement(query);
      
        rs = pst.executeQuery();

        DefaultTableModel bookModel = (DefaultTableModel) tblbook.getModel();
        bookModel.setRowCount(0); // Clear previous rows

        while (rs.next()) {
            int bookID = rs.getInt("book_id");
            String btitle = rs.getString("title");
            String author = rs.getString("author");
            String isbn = rs.getString("isbn");
            String genre = rs.getString("genre");
            int publicationYear = rs.getInt("publication_year");
            int quantity = rs.getInt("copies");
            String location = rs.getString("location");
            String status = rs.getString("status");

            bookModel.addRow(new Object[]{bookID, btitle, author,isbn, genre, publicationYear, quantity, location, status});
        }
    } catch (SQLException ex) {
        Logger.getLogger(staffBook.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    
    public final void autoBookID() {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost/libraryManagementSystem", "root", "");

        // Get the highest book_id from the Books table
        pst = con.prepareStatement("SELECT MAX(book_id) FROM Books");
        rs = pst.executeQuery();

        if (rs.next()) {
            String maxID = rs.getString(1); // Get the highest book_id

            if (maxID != null) {
                int num = Integer.parseInt(maxID) + 1; // Increment the ID
                txtBookID.setText(String.valueOf(num)); // Set it in the text field
            } else {
                txtBookID.setText("1"); // If no records exist, start from 1
            }
        }
    } catch (SQLException ex) {
        Logger.getLogger(staffBook.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error generating Book ID!", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(staffBook.class.getName()).log(Level.SEVERE, null, ex);
    }
}


    
    public final void background(){
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI UI = (BasicInternalFrameUI) this.getUI();
        UI.setNorthPane(null);
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtBookID = new javax.swing.JTextField();
        txtTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtISBN = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCopies = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblbook = new rojerusan.RSTableMetro();
        jLabel1 = new javax.swing.JLabel();
        cmbGenre = new javax.swing.JComboBox<>();
        txtLocation = new javax.swing.JComboBox<>();
        rSMaterialButtonRectangle2 = new rojerusan.RSMaterialButtonRectangle();
        rSMaterialButtonRectangle3 = new rojerusan.RSMaterialButtonRectangle();
        rSMaterialButtonRectangle4 = new rojerusan.RSMaterialButtonRectangle();
        rSMaterialButtonRectangle5 = new rojerusan.RSMaterialButtonRectangle();
        jLabel14 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();

        jPanel7.setBackground(new java.awt.Color(240, 237, 226));
        jPanel7.setPreferredSize(new java.awt.Dimension(1238, 750));

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel2.setText("BOOK ID");

        txtBookID.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        txtBookID.setPreferredSize(new java.awt.Dimension(78, 30));
        txtBookID.setSize(new java.awt.Dimension(78, 30));
        txtBookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBookIDActionPerformed(evt);
            }
        });

        txtTitle.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        txtTitle.setPreferredSize(new java.awt.Dimension(78, 30));
        txtTitle.setSize(new java.awt.Dimension(78, 30));
        txtTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitleActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel3.setText("TITLE");

        txtAuthor.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        txtAuthor.setPreferredSize(new java.awt.Dimension(78, 30));
        txtAuthor.setSize(new java.awt.Dimension(78, 30));
        txtAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuthorActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel4.setText("AUTHOR");

        txtISBN.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        txtISBN.setPreferredSize(new java.awt.Dimension(78, 30));
        txtISBN.setSize(new java.awt.Dimension(78, 30));
        txtISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtISBNActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel9.setText("ISBN");

        jLabel10.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel10.setText("GENRE");

        jLabel11.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel11.setText("YEAR");

        txtYear.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        txtYear.setPreferredSize(new java.awt.Dimension(78, 30));
        txtYear.setSize(new java.awt.Dimension(78, 30));
        txtYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYearActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel12.setText("QUANTITY");

        txtCopies.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        txtCopies.setPreferredSize(new java.awt.Dimension(78, 30));
        txtCopies.setSize(new java.awt.Dimension(78, 30));
        txtCopies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCopiesActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel13.setText("LOCATION");

        tblbook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Author", "ISBN", "Genre", "Date", "Quantity", "Location", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblbook.setColorBackgoundHead(new java.awt.Color(255, 255, 255));
        tblbook.setColorBordeFilas(new java.awt.Color(255, 255, 255));
        tblbook.setColorBordeHead(new java.awt.Color(255, 255, 255));
        tblbook.setColorFilasBackgound2(new java.awt.Color(255, 255, 255));
        tblbook.setColorFilasForeground1(new java.awt.Color(61, 58, 87));
        tblbook.setColorFilasForeground2(new java.awt.Color(61, 58, 87));
        tblbook.setColorForegroundHead(new java.awt.Color(0, 0, 0));
        tblbook.setColorSelBackgound(new java.awt.Color(61, 58, 87));
        tblbook.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        tblbook.setFuenteFilas(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblbook.setFuenteFilasSelect(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblbook.setGridColor(new java.awt.Color(204, 204, 204));
        tblbook.setRowHeight(30);
        tblbook.setSelectionBackground(new java.awt.Color(61, 58, 87));
        tblbook.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tblbook.setShowGrid(false);
        tblbook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblbookMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblbook);

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(50, 61, 46));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Books");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 5, 0, new java.awt.Color(0, 0, 0)));

        cmbGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fiction", "Non-Fiction", "Science Fiction", "Mystery/Thriller", "Fantasy" }));
        cmbGenre.setSelectedIndex(-1);
        cmbGenre.setPreferredSize(new java.awt.Dimension(78, 30));
        cmbGenre.setSize(new java.awt.Dimension(72, 30));

        txtLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Shelf A1", "Shelf A2", "Shelf A3", "Shelf B1", "Shelf B2", "Shelf B3", "Shelf C1", "Shelf C2", "Shelf C3", "Shelf D1", "Shelf D2", "Shelf D3" }));
        txtLocation.setSelectedIndex(-1);
        txtLocation.setPreferredSize(new java.awt.Dimension(78, 30));
        txtLocation.setSize(new java.awt.Dimension(72, 30));
        txtLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocationActionPerformed(evt);
            }
        });

        rSMaterialButtonRectangle2.setBackground(new java.awt.Color(50, 61, 46));
        rSMaterialButtonRectangle2.setText("ADD");
        rSMaterialButtonRectangle2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rSMaterialButtonRectangle2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMaterialButtonRectangle2ActionPerformed(evt);
            }
        });

        rSMaterialButtonRectangle3.setBackground(new java.awt.Color(50, 61, 46));
        rSMaterialButtonRectangle3.setText("UPDATE");
        rSMaterialButtonRectangle3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rSMaterialButtonRectangle3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMaterialButtonRectangle3ActionPerformed(evt);
            }
        });

        rSMaterialButtonRectangle4.setBackground(new java.awt.Color(50, 61, 46));
        rSMaterialButtonRectangle4.setText("DELETE");
        rSMaterialButtonRectangle4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rSMaterialButtonRectangle4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMaterialButtonRectangle4ActionPerformed(evt);
            }
        });

        rSMaterialButtonRectangle5.setBackground(new java.awt.Color(50, 61, 46));
        rSMaterialButtonRectangle5.setText("CLEAR");
        rSMaterialButtonRectangle5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rSMaterialButtonRectangle5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMaterialButtonRectangle5ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel14.setText("STATUS");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Borrowed", "Reserve", " " }));
        cmbStatus.setSelectedIndex(-1);
        cmbStatus.setPreferredSize(new java.awt.Dimension(78, 30));
        cmbStatus.setSize(new java.awt.Dimension(72, 30));
        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rSMaterialButtonRectangle2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rSMaterialButtonRectangle3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rSMaterialButtonRectangle4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rSMaterialButtonRectangle5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbGenre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtCopies, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtLocation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(66, 66, 66)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(451, 451, 451)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cmbGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtCopies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rSMaterialButtonRectangle2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rSMaterialButtonRectangle4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rSMaterialButtonRectangle3, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(rSMaterialButtonRectangle5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1249, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 1237, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 714, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBookIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBookIDActionPerformed

    private void txtTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTitleActionPerformed

    private void txtAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAuthorActionPerformed

    private void txtISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtISBNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtISBNActionPerformed

    private void txtYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYearActionPerformed

    private void txtCopiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCopiesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCopiesActionPerformed

    private void txtLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLocationActionPerformed

    private void rSMaterialButtonRectangle2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMaterialButtonRectangle2ActionPerformed
       
        try {
            // Check if fields are empty
            if (txtTitle.getText().trim().isEmpty() || txtAuthor.getText().trim().isEmpty() || 
                txtISBN.getText().trim().isEmpty() || cmbGenre.getSelectedIndex() == -1 ||
                txtYear.getText().trim().isEmpty() || txtCopies.getText().trim().isEmpty() || 
                txtLocation.getSelectedIndex() == -1 || cmbStatus.getSelectedIndex() == -1) {

                JOptionPane.showMessageDialog(this, "All fields must be filled!", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Get input values
            String title = txtTitle.getText();
            String author = txtAuthor.getText();
            String isbn = txtISBN.getText();
            String genre = cmbGenre.getSelectedItem().toString();
            int year = Integer.parseInt(txtYear.getText());
            int copies = Integer.parseInt(txtCopies.getText());
            String location = txtLocation.getSelectedItem().toString();
            String status = cmbStatus.getSelectedItem().toString();

            // Confirm insertion
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to add this book?", 
                                                        "Confirm", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // SQL query to insert book
                String sql = "INSERT INTO Books (title, author, isbn, genre, publication_year, copies, location, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                pst = con.prepareStatement(sql);

                pst.setString(1, title);
                pst.setString(2, author);
                pst.setString(3, isbn);
                pst.setString(4, genre);
                pst.setInt(5, year);
                pst.setInt(6, copies);
                pst.setString(7, location);
                pst.setString(8, status);

                // Execute the insert
                int k = pst.executeUpdate();
                if (k == 1) {
                    JOptionPane.showMessageDialog(this, "Book added successfully!");

                    // Clear fields
                    txtTitle.setText("");
                    txtAuthor.setText("");
                    txtISBN.setText("");
                    cmbGenre.setSelectedIndex(-1);
                    txtYear.setText("");
                    txtCopies.setText("");
                    txtLocation.setSelectedIndex(-1);
                    cmbStatus.setSelectedIndex(-1);

                    // Refresh table
                    autoBookID();
                    showTable();
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input! Please enter valid values.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(staffBook.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_rSMaterialButtonRectangle2ActionPerformed

    private void rSMaterialButtonRectangle3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMaterialButtonRectangle3ActionPerformed
        
    try {
        // Check if all fields are filled
        if (txtBookID.getText().trim().isEmpty() || txtTitle.getText().trim().isEmpty() || 
            txtAuthor.getText().trim().isEmpty() || txtISBN.getText().trim().isEmpty() || 
            cmbGenre.getSelectedIndex() == -1 || txtYear.getText().trim().isEmpty() || 
            txtCopies.getText().trim().isEmpty() || txtLocation.getSelectedIndex() == -1 || 
            cmbStatus.getSelectedIndex() == -1) {

            JOptionPane.showMessageDialog(this, "All fields must be filled before updating!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get input values
        int bookID = Integer.parseInt(txtBookID.getText());
        String title = txtTitle.getText();
        String author = txtAuthor.getText();
        String isbn = txtISBN.getText();
        String genre = cmbGenre.getSelectedItem().toString();
        int publicationYear = Integer.parseInt(txtYear.getText());
        int copies = Integer.parseInt(txtCopies.getText());
        String location = txtLocation.getSelectedItem().toString();
        String status = cmbStatus.getSelectedItem().toString();

        // Confirm update
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to update this book?", 
                                                    "Confirm Update", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // SQL query to update book
            String sql = "UPDATE Books SET title = ?, author = ?, isbn = ?, genre = ?, publication_year = ?, copies = ?, location = ?, status = ? WHERE book_id = ?";
            pst = con.prepareStatement(sql);

            pst.setString(1, title);
            pst.setString(2, author);
            pst.setString(3, isbn);
            pst.setString(4, genre);
            pst.setInt(5, publicationYear);
            pst.setInt(6, copies);
            pst.setString(7, location);
            pst.setString(8, status);
            pst.setInt(9, bookID);

            // Execute the update
            int k = pst.executeUpdate();
            if (k == 1) {
                JOptionPane.showMessageDialog(this, "Book updated successfully!");

                // Clear fields
                txtBookID.setText("");
                txtTitle.setText("");
                txtAuthor.setText("");
                txtISBN.setText("");
                cmbGenre.setSelectedIndex(-1);
                txtYear.setText("");
                txtCopies.setText("");
                txtLocation.setSelectedIndex(-1);
                cmbStatus.setSelectedIndex(-1);

                // Refresh table
                autoBookID();
                showTable();
            } else {
                JOptionPane.showMessageDialog(this, "Book not found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input! Please enter valid values.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(staffBook.class.getName()).log(Level.SEVERE, null, ex);
    }


    }//GEN-LAST:event_rSMaterialButtonRectangle3ActionPerformed

    private void rSMaterialButtonRectangle4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMaterialButtonRectangle4ActionPerformed
      
    try {
        // Check if all fields are filled
        if (txtTitle.getText().trim().isEmpty() || txtAuthor.getText().trim().isEmpty() || 
            txtISBN.getText().trim().isEmpty() || cmbGenre.getSelectedIndex() == -1 ||
            txtYear.getText().trim().isEmpty() || txtCopies.getText().trim().isEmpty() || 
            txtLocation.getSelectedIndex() == -1 || cmbStatus.getSelectedIndex() == -1) {

            JOptionPane.showMessageDialog(this, "All fields must be filled before deleting!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get input values
        String title = txtTitle.getText();
        String author = txtAuthor.getText();
        String isbn = txtISBN.getText();

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this book?", 
                                                    "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // SQL query to delete book
            String sql = "DELETE FROM Books WHERE title = ? AND author = ? AND isbn = ?";
            pst = con.prepareStatement(sql);

            pst.setString(1, title);
            pst.setString(2, author);
            pst.setString(3, isbn);

            // Execute the delete
            int k = pst.executeUpdate();
            if (k == 1) {
                JOptionPane.showMessageDialog(this, "Book deleted successfully!");

                // Clear fields
                txtTitle.setText("");
                txtAuthor.setText("");
                txtISBN.setText("");
                cmbGenre.setSelectedIndex(-1);
                txtYear.setText("");
                txtCopies.setText("");
                txtLocation.setSelectedIndex(-1);
                cmbStatus.setSelectedIndex(-1);

                // Refresh table
                autoBookID();
                showTable();
            } else {
                JOptionPane.showMessageDialog(this, "Book not found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(staffBook.class.getName()).log(Level.SEVERE, null, ex);
    }


    }//GEN-LAST:event_rSMaterialButtonRectangle4ActionPerformed

    private void rSMaterialButtonRectangle5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMaterialButtonRectangle5ActionPerformed
       txtBookID.setText("");
                txtTitle.setText("");
                txtAuthor.setText("");
                txtISBN.setText("");
                cmbGenre.setSelectedIndex(-1);
                txtYear.setText("");
                txtCopies.setText("");
                txtLocation.setSelectedIndex(-1);
                cmbStatus.setSelectedIndex(-1);
                autoBookID();

    }//GEN-LAST:event_rSMaterialButtonRectangle5ActionPerformed

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStatusActionPerformed

    private void tblbookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblbookMouseClicked
        int selectedRow = tblbook.getSelectedRow();
    
    // Check if a row is selected
    if (selectedRow != -1) {
        // Populate the fields with values from the selected row
        txtBookID.setText(tblbook.getValueAt(selectedRow, 0).toString());
        txtTitle.setText(tblbook.getValueAt(selectedRow, 1).toString());
        txtAuthor.setText(tblbook.getValueAt(selectedRow, 2).toString());
        txtISBN.setText(tblbook.getValueAt(selectedRow, 3).toString());
        cmbGenre.setSelectedItem(tblbook.getValueAt(selectedRow, 4).toString());
        txtYear.setText(tblbook.getValueAt(selectedRow, 5).toString());
        txtCopies.setText(tblbook.getValueAt(selectedRow, 6).toString());
        txtLocation.setSelectedItem(tblbook.getValueAt(selectedRow, 7).toString());
        cmbStatus.setSelectedItem(tblbook.getValueAt(selectedRow, 8).toString());
    }
    }//GEN-LAST:event_tblbookMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbGenre;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private rojerusan.RSMaterialButtonRectangle rSMaterialButtonRectangle2;
    private rojerusan.RSMaterialButtonRectangle rSMaterialButtonRectangle3;
    private rojerusan.RSMaterialButtonRectangle rSMaterialButtonRectangle4;
    private rojerusan.RSMaterialButtonRectangle rSMaterialButtonRectangle5;
    private rojerusan.RSTableMetro tblbook;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtCopies;
    private javax.swing.JTextField txtISBN;
    private javax.swing.JComboBox<String> txtLocation;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
